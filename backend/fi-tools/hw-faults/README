==== Description ====

This fault injection tool is capable of emulating soft errors (transient hardware faults) affecting the CPU registers (or other parts of the microprocessor whose state will later propagate until the registers). The fault model is a single bit-flip, widely regarded as being representative of soft errors (more specifically, SBU's).

The fault injection tool is written in C and requires a Linux-based operating system. It takes advantage of the ptrace functionality included by default in the Linux kernel to briefly stop the execution of a process/thread, obtain the register state of that process, perform a bit-flip in one of the registers, and let the execution continue.
Since the ptrace functionality already exists in the kernel, no modifications to the operating system are needed and the fault injector can execute in user-space. The ptrace functionality is used by GDB (GNU Project Debugger) and other debuggers, with similar yet more complex objectives, and by a significant amount of other fault injection tools (e.g., FERRARI).

Currently there is no support for emulating soft errors affecting main memory (altough that could be added) because the overhead would be too high.

==== Compiling ====

Currently there are 3 versions of the fault injection.
Some versions depend on the architecture that you want to target: pinject_intel_v2.c and pinject_intel_deadline.c (for x86_64) and pinject_arm (for ARM).
2 version for X86_64 vary according to the triggering mechanism: pinject_intel_v2.c receives a value in milliseconds that it should wait before injecting.
pinject_intel_deadline.c receives a UNIX time (with nanoseconds) as the moment at which it should perform injection (and will use this deadline to calculate how much time it must wait).

To compile just do as follows (change accordingly):
	> make intel
or
	> make deadline
or
	> make arm

If you wish to clean you can do "make clean".

==== Enabling/disabling features ====
The x86_64 versions support enabling and disabling:
	- Printing the pre- and post- injection register values (pass _PRINT_REGS_ to enable it)
	- Printing the UNIX timestamp when the injection effectively happened (pass _PRINT_TS_ to enable it)

The Makefile has both features enabled by default, you can change it there if you dont need them.

==== Executing ====

NOTE: Before running it is strongly advised that you execute the following command as root, otherwise you may have trouble attaching the fault injector to the target process.

	echo 0 > /proc/sys/kernel/yama/ptrace_scope
	
To run the injector you should call the executable file after compiling and pass the required parameters, which are "<pid> <register_type> <bit_pos> <sleep_time or deadline>".

<pid> -> The PID of the process or thread in which you want to inject.
<register_type> -> An integer value that refers to which register you want to inject.
Depending on the architecture each value is associated with a register. You can check it in the code or use the tables below.

Intel x86_64                  ARM
================              ================
| ID | Register|              | ID | Register|
| 0  | IP      |              | 0  | SB      |
| 1  | SP      |              | 1  | PC      |
| 2  | AX      |              | 2  | LR      |
| 3  | BX      |              | 3  | SP      |
| 4  | CX      |              | 4  | IP      |
| 5  | DX      |              | 5  | A1      |
| 6  | CS      |              | 6  | A2      |
| 7  | SS      |              | 7  | A3      |
| 8  | EFLAGS  |              | 8  | A4      |
| 9  | BP      |              | 9  | V1      |
| 10 | R8      |              | 10 | V2      |
| 11 | R9      |              | 11 | V3      |
| 12 | R10     |              | 12 | V4      |
| 13 | R11     |              | 13 | V5      |
| 14 | R12     |              | 14 | V6      |
| 15 | R13     |              | 15 | V7      |
| 16 | R14     |              | 16 | V8      |
| 17 | R15     |              ================
| 18 | RSI     |
| 19 | RDI     |
| 20 | ORIG_AX |
| 21 | FS_BASE |
| 22 | GS_BASE |
| 23 | DS      |
| 24 | ES      |
| 25 | FS      |
| 26 | GS      |
================

<bit_pos> -> Identifies which bit in the register you want to flip (in 64-bit registers can range from 0 to 63 inclusive)
<sleep_time> -> Defines how many miliseconds should pass since the start of the fault injector until the injection is performed.
<deadline> -> Defines the moment when the injection should occur (64-bit long with UNIX time including nanoseconds)

==== Example ====

Compile code and inject in process with PID=1234, A1 register, bit 12, after 3 seconds have passed.
> gcc pinject_arm.c -o pinject -Wall
> echo 0 > /proc/sys/kernel/yama/ptrace_scope
> ./pinject 1234 5 12 3000
